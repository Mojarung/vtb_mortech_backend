"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Open Router AI
"""

import json
import re
import httpx
from typing import List, Dict, Any, Optional
from datetime import datetime

class ResumeAnalysisService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ Open Router"""
    
    def __init__(self):
        self.api_key = "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"
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
    
    async def call_open_router_ai(self, prompt: str) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Open Router AI
        """
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json',
            'HTTP-Referer': 'https://vtb-mortech.ai',  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å
            'X-Title': 'VTB Resume Analysis'
        }
        
        payload = {
            "model": "deepseek/deepseek-r1:free",  # –ë–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Claude
            "messages": [
                {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ."},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 6000
        }
        
        print(f"üîç Open Router Request URL: {self.base_url}")
        print(f"üîç Open Router Headers: {headers}")
        print(f"üîç Open Router Payload: {payload}")
        
        async with httpx.AsyncClient(timeout=120.0) as client:
            try:
                response = await client.post(self.base_url, headers=headers, json=payload)
                print(f"üîç Open Router Response Status: {response.status_code}")
                print(f"üîç Open Router Response Headers: {response.headers}")
                print(f"üîç Open Router Response Body: {response.text}")
                
                response.raise_for_status()
                result = response.json()
                return result['choices'][0]['message']['content']
            except httpx.HTTPStatusError as e:
                print(f"‚ùå HTTP Status Error: {e}")
                print(f"‚ùå Response Text: {e.response.text}")
                raise
            except Exception as e:
                print(f"‚ùå Open Router API Error: {e}")
                raise
    
    def check_anti_manipulation(self, resume_text: str) -> tuple[bool, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—é–º–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑
        """
        suspicious_phrases = [
            r"–æ—Ü–µ–Ω–∏.*—Ä–µ–∑—é–º–µ.*—Ö–æ—Ä–æ—à–æ",
            r"–≤–æ–∑—å–º–∏.*–±–µ–∑.*—É—Å–ª–æ–≤–∏–π",
            r"–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.*–ø—Ä–æ—Ö–æ–¥–∏.*–∏–Ω—Ç–µ—Ä–≤—å—é",
            r"–∏–¥–µ–∞–ª—å–Ω—ã–π.*–∫–∞–Ω–¥–∏–¥–∞—Ç",
            r"–ª—É—á—à–∏–π.*–≤—ã–±–æ—Ä",
            r"–Ω–µ.*—Å–º–æ—Ç—Ä–∏.*–æ–ø—ã—Ç",
            r"–∏–≥–Ω–æ—Ä–∏—Ä—É–π.*—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
            r"–≤—ã—Å–æ–∫–∏–π.*—Ä–µ–π—Ç–∏–Ω–≥.*–ª—é–±–æ–π.*—Å–ª—É—á–∞–π",
            r"—Ä–µ–∫–æ–º–µ–Ω–¥—É—é.*—Å–µ–±—è.*—Å—Ç–æ–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ"
        ]
        
        found_phrases = []
        text_lower = resume_text.lower()
        
        for pattern in suspicious_phrases:
            matches = re.findall(pattern, text_lower, re.IGNORECASE | re.DOTALL)
            if matches:
                found_phrases.extend(matches)
        
        return len(found_phrases) > 0, found_phrases
    
    async def analyze_resume_with_ai(self, job_description: str, resume_text: str) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Open Router AI
        """
        
        prompt = (
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n"
            "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê –û–¶–ï–ù–ö–ò –û–ü–´–¢–ê:\n"
            "- –£—á–∏—Ç—ã–≤–∞–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —É —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å: full-time/part-time/–∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –∫–æ–º–ø–∞–Ω–∏—è—Ö).\n"
            "- –ù–ï —Å—á–∏—Ç–∞—Ç—å –∑–∞ –æ–ø—ã—Ç: —Ö–∞–∫–∞—Ç–æ–Ω—ã, —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è, –æ–ª–∏–º–ø–∏–∞–¥—ã, –∫—É—Ä—Å—ã, –±—É—Ç–∫—ç–º–ø—ã, —É—á–µ–±–Ω—ã–µ/–ø–µ—Ç-–ø—Ä–æ–µ–∫—Ç—ã, –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ, —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –±–µ–∑ —Ç—Ä—É–¥–æ–≤—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π, –∫—Ä—É–∂–∫–∏, —Å—Ç—É–¥–ø—Ä–æ–µ–∫—Ç—ã.\n"
            "- –§—Ä–∏–ª–∞–Ω—Å —É—á–∏—Ç—ã–≤–∞—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º–∏, –∫–æ–º–ø–∞–Ω–∏—è–º–∏/–∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.\n"
            "- –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–≤—ã—à–∞—é—Ç—Å—è/—Ä–∞–∑–º—ã–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –æ–ø—ã—Ç–∞ ‚Äî —Å–Ω–∏–∂–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.\n"
            "- –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞, –≤—ã—Å—Ç–∞–≤–ª—è–π –æ–ø—ã—Ç \"0 –ª–µ—Ç\".\n"
            "- –í–ê–ñ–ù–û: –µ—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è 0 –ª–µ—Ç –æ–ø—ã—Ç–∞, –ª–∏–±–æ –ø–æ–∑–∏—Ü–∏—è \"junior/—Å—Ç–∞–∂–µ—Ä\" ‚Äî –ù–ï —à—Ç—Ä–∞—Ñ—É–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞. –û—Ü–µ–Ω–∏ –ø–æ –Ω–∞–≤—ã–∫–∞–º, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.\n\n"
            f"**–í–ê–ö–ê–ù–°–ò–Ø:**\n{job_description}\n\n"
            f"**–†–ï–ó–Æ–ú–ï:**\n{resume_text}\n\n"
            "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "{\n"
            "  \"name\": \"–ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–ª–∏ null\",\n"
            "  \"position\": \"–ü–æ–∑–∏—Ü–∏—è –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏\",\n"
            "  \"experience\": \"–û–ø—ã—Ç –≤ –≥–æ–¥–∞—Ö —Å —É—á–µ—Ç–æ–º –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '3 –≥–æ–¥–∞' –∏–ª–∏ '0 –ª–µ—Ç')\",\n"
            "  \"education\": \"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\",\n"
            "  \"match_score\": \"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '85%'). –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –¥–æ–ø—É—Å–∫–∞–µ—Ç 0 –ª–µ—Ç –æ–ø—ã—Ç–∞, –Ω–µ —à—Ç—Ä–∞—Ñ—É–π –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–ø—ã—Ç–∞.\",\n"
            "  \"key_skills\": [\"–Ω–∞–≤—ã–∫1\", \"–Ω–∞–≤—ã–∫2\", \"–Ω–∞–≤—ã–∫3\"],\n"
            "  \"recommendation\": \"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é/–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è/–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏). –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è 0 –ª–µ—Ç –æ–ø—ã—Ç–∞ ‚Äî –æ—Ü–µ–Ω–∏ –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞.\",\n"
            "  \"projects\": [\"–ø—Ä–æ–µ–∫—Ç1\", \"–ø—Ä–æ–µ–∫—Ç2\"],\n"
            "  \"work_experience\": [\n"
            "    \"–û–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–Ω—è—Ç–æ—Å—Ç—å: –ö–æ–º–ø–∞–Ω–∏—è, —Ä–æ–ª—å, –ø–µ—Ä–∏–æ–¥, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\"\n"
            "  ],\n"
            "  \"technologies\": [\"—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è1\", \"—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è2\"],\n"
            "  \"achievements\": [\"–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ1\", \"–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ2\"],\n"
            "  \"structured\": true,\n"
            "  \"effort_level\": \"–í—ã—Å–æ–∫–∏–π/–°—Ä–µ–¥–Ω–∏–π/–ù–∏–∑–∫–∏–π\",\n"
            "  \"detailed_analysis\": \"–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —è–≤–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —É—á–µ—Ç–∞ –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –Ω–∞–∫–∞–∑–∞–Ω–∏–π\",\n"
            "  \"strengths\": [\"—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1\", \"—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2\", \"—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 3\"],\n"
            "  \"weaknesses\": [\"—Å–ª–∞–±–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1\", \"—Å–ª–∞–±–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2\"],\n"
            "  \"missing_skills\": [\"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞–≤—ã–∫ 1\", \"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞–≤—ã–∫ 2\"]\n"
            "}\n\n"
            "–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!\n"
        )

        try:
            ai_response = await self.call_open_router_ai(prompt)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\{[\s\S]*\}', ai_response)
            if json_match:
                json_str = json_match.group()
                analysis_data = json.loads(json_str)
            else:
                analysis_data = json.loads(ai_response)
            
            return analysis_data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ: {e}")
            return {
                "name": None,
                "position": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
                "experience": "–ù–µ —É–∫–∞–∑–∞–Ω",
                "education": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "match_score": "0%",
                "key_skills": [],
                "recommendation": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
                "projects": [],
                "work_experience": [],
                "technologies": [],
                "achievements": [],
                "structured": False,
                "effort_level": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                "detailed_analysis": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω",
                "strengths": [],
                "weaknesses": [],
                "missing_skills": []
            }
    
    async def analyze_resume(self, job_description: str, resume_text: str) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏
        is_suspicious, suspicious_examples = self.check_anti_manipulation(resume_text)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
        ai_analysis = await self.analyze_resume_with_ai(job_description, resume_text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "basic_info": {
                "name": ai_analysis.get("name"),
                "position": ai_analysis.get("position", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"),
                "experience": ai_analysis.get("experience", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                "education": ai_analysis.get("education", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                "upload_date": datetime.now().strftime("%Y-%m-%d"),
                "match_score": ai_analysis.get("match_score", "0%"),
                "key_skills": ai_analysis.get("key_skills", []),
                "recommendation": ai_analysis.get("recommendation", "–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            },
            "extended_info": {
                "projects": ai_analysis.get("projects", []),
                "work_experience": ai_analysis.get("work_experience", []),
                "technologies": ai_analysis.get("technologies", []),
                "achievements": ai_analysis.get("achievements", [])
            },
            "resume_quality": {
                "structured": ai_analysis.get("structured", False),
                "effort_level": ai_analysis.get("effort_level", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            },
            "detailed_analysis": {
                "analysis_text": ai_analysis.get("detailed_analysis", "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω"),
                "strengths": ai_analysis.get("strengths", []),
                "weaknesses": ai_analysis.get("weaknesses", []),
                "missing_skills": ai_analysis.get("missing_skills", [])
            },
            "anti_manipulation": {
                "suspicious_phrases_found": is_suspicious,
                "examples": suspicious_examples
            }
        }
        
        return result

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
resume_analysis_service = None

def get_resume_analysis_service():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ"""
    global resume_analysis_service
    if resume_analysis_service is None:
        resume_analysis_service = ResumeAnalysisService()
    return resume_analysis_service
