from __future__ import annotations

import time
from typing import List
from fastapi import APIRouter, File, UploadFile, HTTPException, status, Depends
from fastapi.responses import JSONResponse

from app.schemas.ocr import OCRResponse, OCRStatus, ExtractedText, ResumeData
from app.services.ocr_service import OCRService
from app.api.deps import get_current_user
from app.models.user import User

router = APIRouter(prefix="/ocr", tags=["ocr"])


@router.post("/process-pdf", response_model=OCRResponse)
async def process_pdf(
    file: UploadFile = File(..., description="PDF —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"),
    current_user: User = Depends(get_current_user)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é OCR
    
    - **file**: PDF —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - **current_user**: –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not file.filename.lower().endswith('.pdf'):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 50MB)
    if file.size and file.size > 50 * 1024 * 1024:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50MB"
        )
    
    try:
        start_time = time.time()
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        pdf_content = await file.read()
        
        if not pdf_content:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            )
        
        print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file.filename} ({len(pdf_content)} –±–∞–π—Ç)")
        
        # –°–æ–∑–¥–∞–µ–º OCR —Å–µ—Ä–≤–∏—Å
        ocr_service = OCRService()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
        extracted_text, resume_data = await ocr_service.process_pdf(pdf_content, file.filename)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_time = time.time() - start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = OCRResponse(
            success=True,
            message=f"PDF —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥",
            total_pages=len(extracted_text),
            extracted_text=extracted_text,
            resume_data=resume_data,
            processing_time=processing_time,
            file_info={
                "filename": file.filename,
                "file_size": len(pdf_content),
                "content_type": file.content_type,
                "user_id": current_user.id,
                "username": current_user.username
            }
        )
        
        print(f"‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {len(extracted_text)}")
        print(f"   –í—Ä–µ–º—è: {processing_time:.2f}—Å")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.username}")
        
        return response
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {str(e)}"
        )


@router.post("/process-pdf-batch", response_model=List[OCRResponse])
async def process_pdf_batch(
    files: List[UploadFile] = File(..., description="–°–ø–∏—Å–æ–∫ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö PDF —Ä–µ–∑—é–º–µ
    
    - **files**: –°–ø–∏—Å–æ–∫ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - **current_user**: –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    
    if not files:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª"
        )
    
    if len(files) > 10:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: 10"
        )
    
    results = []
    
    try:
        print(f"üì¶ –ù–∞—á–∏–Ω–∞—é –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(files)} —Ñ–∞–π–ª–æ–≤")
        
        for i, file in enumerate(files, 1):
            print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª {i}/{len(files)}: {file.filename}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                if not file.filename.lower().endswith('.pdf'):
                    results.append(OCRResponse(
                        success=False,
                        message=f"–§–∞–π–ª {file.filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF",
                        total_pages=0,
                        extracted_text=[],
                        resume_data=None,
                        processing_time=0.0,
                        file_info={
                            "filename": file.filename,
                            "file_size": file.size or 0,
                            "content_type": file.content_type,
                            "user_id": current_user.id,
                            "username": current_user.username,
                            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"
                        }
                    ))
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if file.size and file.size > 50 * 1024 * 1024:
                    results.append(OCRResponse(
                        success=False,
                        message=f"–§–∞–π–ª {file.filename} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50MB)",
                        total_pages=0,
                        extracted_text=[],
                        resume_data=None,
                        processing_time=0.0,
                        file_info={
                            "filename": file.filename,
                            "file_size": file.size,
                            "content_type": file.content_type,
                            "user_id": current_user.id,
                            "username": current_user.username,
                            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"
                        }
                    ))
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                start_time = time.time()
                pdf_content = await file.read()
                
                if not pdf_content:
                    results.append(OCRResponse(
                        success=False,
                        message=f"–§–∞–π–ª {file.filename} –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω",
                        total_pages=0,
                        extracted_text=[],
                        resume_data=None,
                        processing_time=0.0,
                        file_info={
                            "filename": file.filename,
                            "file_size": len(pdf_content),
                            "content_type": file.content_type,
                            "user_id": current_user.id,
                            "username": current_user.username,
                            "error": "–§–∞–π–ª –ø—É—Å—Ç–æ–π"
                        }
                    ))
                    continue
                
                # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
                ocr_service = OCRService()
                extracted_text, resume_data = await ocr_service.process_pdf(pdf_content, file.filename)
                
                processing_time = time.time() - start_time
                
                # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                results.append(OCRResponse(
                    success=True,
                    message=f"–§–∞–π–ª {file.filename} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                    total_pages=len(extracted_text),
                    extracted_text=extracted_text,
                    resume_data=resume_data,
                    processing_time=processing_time,
                    file_info={
                        "filename": file.filename,
                        "file_size": len(pdf_content),
                        "content_type": file.content_type,
                        "user_id": current_user.id,
                        "username": current_user.username
                    }
                ))
                
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f}—Å")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file.filename}: {e}")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                results.append(OCRResponse(
                    success=False,
                    message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}",
                    total_pages=0,
                    extracted_text=[],
                    resume_data=None,
                    processing_time=0.0,
                    file_info={
                        "filename": file.filename,
                        "file_size": file.size or 0,
                        "content_type": file.content_type,
                        "user_id": current_user.id,
                        "username": current_user.username,
                        "error": str(e)
                    }
                ))
        
        print(f"\nüìä –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {len([r for r in results if r.success])}")
        print(f"   –° –æ—à–∏–±–∫–∞–º–∏: {len([r for r in results if not r.success])}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        )


@router.get("/status/{task_id}", response_model=OCRStatus)
async def get_ocr_status(
    task_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ OCR –∑–∞–¥–∞—á–∏ (–¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
    
    - **task_id**: ID –∑–∞–¥–∞—á–∏ OCR
    - **current_user**: –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    
    return OCRStatus(
        status="completed",
        progress=1.0,
        estimated_time=0.0,
        current_page=1,
        total_pages=1
    )


@router.get("/health")
async def ocr_health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è OCR —Å–µ—Ä–≤–∏—Å–∞
    """
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tesseract
        import pytesseract
        pytesseract.get_tesseract_version()
        
        return {
            "status": "healthy",
            "service": "OCR",
            "tesseract": "available",
            "message": "OCR —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        }
        
    except Exception as e:
        return JSONResponse(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            content={
                "status": "unhealthy",
                "service": "OCR",
                "error": str(e),
                "message": "OCR —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
        )
