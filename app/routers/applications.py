from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File, Form, BackgroundTasks
from sqlalchemy.orm import Session, joinedload
from typing import List, Optional
from app.database import get_db
from app.models import User, Vacancy, Resume, ApplicationStatus, ProcessingStatus
from app.auth import get_current_user, get_current_hr_user
from app.schemas import ResumeResponse
from app.services.async_resume_processor import async_resume_processor
from datetime import datetime
import os
import shutil
import httpx
import asyncio

router = APIRouter()

@router.post("/apply/{vacancy_id}", response_model=ResumeResponse)
async def apply_for_vacancy(
    vacancy_id: int,
    file: UploadFile = File(...),
    cover_letter: Optional[str] = Form(None),
    background_tasks: BackgroundTasks = BackgroundTasks(),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Ç–∫—Ä—ã—Ç–∞
    vacancy = db.query(Vacancy).filter(Vacancy.id == vacancy_id).first()
    if not vacancy:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    if vacancy.status.value != "open":
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–í–∞–∫–∞–Ω—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é
    existing_application = db.query(Resume).filter(
        Resume.user_id == current_user.id,
        Resume.vacancy_id == vacancy_id
    ).first()
    
    if existing_application:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é"
        )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    upload_dir = "uploads/resumes"
    os.makedirs(upload_dir, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{current_user.id}_{vacancy_id}_{timestamp}_{file.filename}"
    file_path = os.path.join(upload_dir, filename)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_resume = Resume(
        user_id=current_user.id,
        vacancy_id=vacancy_id,
        file_path=file_path,
        original_filename=file.filename,
        status=ApplicationStatus.PENDING,
        notes=cover_letter,
        processing_status=ProcessingStatus.PENDING
    )
    
    db.add(db_resume)
    db.commit()
    db.refresh(db_resume)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ BackgroundTasks
    background_tasks.add_task(
        async_resume_processor.process_resume_async, 
        db_resume.id
    )
    
    return db_resume

@router.get("/my-applications", response_model=List[ResumeResponse])
def get_my_applications(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return db.query(Resume).join(Vacancy).filter(
        Resume.user_id == current_user.id
    ).order_by(Resume.uploaded_at.desc()).all()


@router.get("/status/{resume_id}")
async def get_application_status(
    resume_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏
    """
    try:
        resume = db.query(Resume).filter(
            Resume.id == resume_id,
            Resume.user_id == current_user.id
        ).first()
        
        if not resume:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        result = {
            "resume_id": resume_id,
            "processing_status": resume.processing_status.value,
            "processed": resume.processed,
            "application_status": resume.status.value,
            "uploaded_at": resume.uploaded_at.isoformat() if resume.uploaded_at else None,
            "vacancy_title": resume.vacancy.title if resume.vacancy else None
        }
        
        # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        if resume.processed and resume.analysis:
            analysis = resume.analysis
            result["analysis"] = {
                "name": analysis.name,
                "position": analysis.position,
                "experience": analysis.experience,
                "education": analysis.education,
                "match_score": analysis.match_score,
                "key_skills": analysis.key_skills,
                "recommendation": analysis.recommendation,
                "projects": analysis.projects,
                "work_experience": analysis.work_experience,
                "technologies": analysis.technologies,
                "achievements": analysis.achievements,
                "structured": analysis.structured,
                "effort_level": analysis.effort_level,
                "suspicious_phrases_found": analysis.suspicious_phrases_found,
                "suspicious_examples": analysis.suspicious_examples
            }
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_application_status: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@router.get("/all", response_model=List[ResumeResponse])
def get_all_applications(
    status_filter: Optional[str] = None,
    vacancy_id: Optional[int] = None,
    processed: Optional[bool] = True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è HR —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–µ–π"""
    query = db.query(Resume).options(
        joinedload(Resume.user),      # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        joinedload(Resume.vacancy),   # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
        joinedload(Resume.analysis)   # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if processed is not None:
        query = query.filter(Resume.processed == processed)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏
    if status_filter:
        try:
            status_enum = ApplicationStatus(status_filter)
            query = query.filter(Resume.status == status_enum)
        except ValueError:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"
            )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
    if vacancy_id:
        query = query.filter(Resume.vacancy_id == vacancy_id)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)
    query = query.order_by(Resume.uploaded_at.desc())
    
    return query.all()

@router.get("/{application_id}", response_model=ResumeResponse)
def get_application_details(
    application_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    application = db.query(Resume).filter(Resume.id == application_id).first()
    
    if not application:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if current_user.role.value == "user" and application.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ"
        )
    
    return application

@router.put("/{application_id}/status")
def update_application_status(
    application_id: int,
    new_status: str,
    notes: Optional[str] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è HR)"""
    print(f"üîÑ Backend: Updating application {application_id} to status {new_status}")
    
    application = db.query(Resume).filter(Resume.id == application_id).first()
    
    if not application:
        print(f"‚ùå Backend: Application {application_id} not found")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    try:
        status_enum = ApplicationStatus(new_status)
        print(f"‚úÖ Backend: Status enum created: {status_enum}")
    except ValueError as e:
        print(f"‚ùå Backend: Invalid status {new_status}: {e}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"
        )
    
    application.status = status_enum
    application.updated_at = datetime.utcnow()
    
    if notes:
        application.notes = notes
    
    db.commit()
    print(f"‚úÖ Backend: Application {application_id} status updated to {new_status}")
    
    return {"message": "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", "new_status": new_status}

@router.delete("/{application_id}")
def delete_application(
    application_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    application = db.query(Resume).filter(Resume.id == application_id).first()
    
    if not application:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if current_user.role.value == "user" and application.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ"
        )
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    try:
        if os.path.exists(application.file_path):
            os.remove(application.file_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    db.delete(application)
    db.commit()
    
    return {"message": "–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞"}

@router.get("/stats/summary")
def get_application_stats(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_hr_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è HR"""
    total_applications = db.query(Resume).count()
    pending_applications = db.query(Resume).filter(
        Resume.status == ApplicationStatus.PENDING
    ).count()
    accepted_applications = db.query(Resume).filter(
        Resume.status == ApplicationStatus.ACCEPTED
    ).count()
    rejected_applications = db.query(Resume).filter(
        Resume.status == ApplicationStatus.REJECTED
    ).count()
    
    return {
        "total": total_applications,
        "pending": pending_applications,
        "reviewed": reviewed_applications,
        "accepted": accepted_applications,
        "rejected": rejected_applications
    }

async def process_resume_with_ocr(resume_id: int, file_path: str, job_description: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ OCR –∏ –Ω–µ–π—Ä–æ–Ω–∫—É"""
    try:
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ {resume_id}")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ OCR —Å–µ—Ä–≤–∏—Å
        ocr_text = await extract_text_with_ocr(file_path)
        if not ocr_text:
            print(f"‚ùå OCR –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {file_path}")
            return
        
        print(f"‚úÖ OCR –∏–∑–≤–ª–µ–∫ —Ç–µ–∫—Å—Ç: {len(ocr_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–π—Ä–æ–Ω–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        ai_result = await analyze_resume_with_ai(ocr_text, job_description)
        if not ai_result:
            print(f"‚ùå –ù–µ–π—Ä–æ–Ω–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ {resume_id}")
            return
        
        print(f"‚úÖ –ù–µ–π—Ä–æ–Ω–∫–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ —Ä–µ–∑—é–º–µ: –ø–æ–ª—É—á–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è '{ai_result.get('recommendation')}'")
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
        from app.database import SessionLocal
        db = SessionLocal()
        try:
            resume = db.query(Resume).filter(Resume.id == resume_id).first()
            if resume:
                resume.status = ApplicationStatus.PENDING
                resume.processed = True
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞, –ø–ª—é—Å —è–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
                resume.notes = f"{ai_result['text']}\n\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø_–°–¢–†–£–ö–¢–£–†–ê: {ai_result.get('recommendation', '')}".strip()
                db.commit()
                print(f"‚úÖ –ó–∞—è–≤–∫–∞ {resume_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –¥–ª—è HR")
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ {resume_id}: {e}")

async def extract_text_with_ocr(file_path: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ OCR —Å–µ—Ä–≤–∏—Å"""
    try:
        ocr_url = "https://mojarung-vtb-mortech-ocr-1103.twc1.net/ocr/process-file"
        
        with open(file_path, "rb") as file:
            files = {"file": (os.path.basename(file_path), file, "application/octet-stream")}
            
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(ocr_url, files=files)
                
                if response.status_code == 200:
                    result = response.json()
                    return result.get("text", "")
                else:
                    print(f"‚ùå OCR —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code} - {response.text}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OCR —Å–µ—Ä–≤–∏—Å—É: {e}")
        return None

async def analyze_resume_with_ai(resume_text: str, job_description: str) -> Optional[dict]:
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–∫—É"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ
        from app.services.resume_analysis_service import get_resume_analysis_service
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        service = get_resume_analysis_service()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        analysis_result = await service.analyze_resume(job_description, resume_text)
        
        if analysis_result and "basic_info" in analysis_result:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
            basic_info = analysis_result["basic_info"]
            detailed_analysis = analysis_result.get("detailed_analysis", {})
            
            analysis_text = f"""
ü§ñ –ê–ù–ê–õ–ò–ó –ò–ò:

üìä –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
‚Ä¢ –ò–º—è: {basic_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: {basic_info.get('position', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}
‚Ä¢ –û–ø—ã—Ç: {basic_info.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {basic_info.get('education', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {basic_info.get('match_score', '0%')}

üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {basic_info.get('recommendation', '–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞')}

üìù –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó:
{detailed_analysis.get('analysis_text', '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω')}

‚úÖ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:
{chr(10).join([f"‚Ä¢ {strength}" for strength in detailed_analysis.get('strengths', [])])}

‚ùå –°–õ–ê–ë–´–ï –°–¢–û–†–û–ù–´:
{chr(10).join([f"‚Ä¢ {weakness}" for weakness in detailed_analysis.get('weaknesses', [])])}

üîß –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ù–ê–í–´–ö–ò:
{chr(10).join([f"‚Ä¢ {skill}" for skill in detailed_analysis.get('missing_skills', [])])}


üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–ò:
{analysis_result.get('anti_manipulation', {}).get('suspicious_phrases_found', False) and '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã' or '‚úÖ –†–µ–∑—é–º–µ –≤—ã–≥–ª—è–¥–∏—Ç —á–µ—Å—Ç–Ω–æ'}
"""
            return {
                "text": analysis_text.strip(),
                "recommendation": basic_info.get('recommendation', '–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞')
            }
        else:
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ –Ω–µ–π—Ä–æ–Ω–∫–æ–π: {e}")
        return None
