from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from sqlalchemy import func, desc
from app.database import get_db
from app.models import User, Vacancy, Resume, Interview, ResumeAnalysis, InterviewStatus, UserRole, ApplicationStatus
from app.auth import get_current_user, get_current_hr_user
from app.schemas import UserResponse
from typing import Dict, Any

router = APIRouter()

@router.get("/debug/stats")
def debug_stats(db: Session = Depends(get_db)):
    """Debug endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
    try:
        user_count = db.query(User).count()
        vacancy_count = db.query(Vacancy).count()
        resume_count = db.query(Resume).count()
        interview_count = db.query(Interview).count()
        
        return {
            "users": user_count,
            "vacancies": vacancy_count,
            "resumes": resume_count,
            "interviews": interview_count
        }
    except Exception as e:
        return {"error": str(e)}

@router.get("/candidate/stats")
def get_candidate_stats(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é
        total_interviews = db.query(Interview).join(Resume).filter(
            Resume.user_id == current_user.id
        ).count()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
        completed_interviews = db.query(Interview).join(Resume).filter(
            Resume.user_id == current_user.id,
            Interview.status == InterviewStatus.COMPLETED
        ).count()
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
        scheduled_interviews = db.query(Interview).join(Resume).filter(
            Resume.user_id == current_user.id,
            Interview.status == InterviewStatus.NOT_STARTED
        ).count()
        
        # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤—å—é
        avg_score = db.query(func.avg(Interview.pass_percentage)).join(Resume).filter(
            Resume.user_id == current_user.id,
            Interview.status == InterviewStatus.COMPLETED,
            Interview.pass_percentage.isnot(None)
        ).scalar() or 0
        
        return {
            "totalInterviews": total_interviews,
            "completedInterviews": completed_interviews,
            "scheduledInterviews": scheduled_interviews,
            "averageScore": round(avg_score, 1) if avg_score else 0
        }
    except Exception as e:
        print(f"Error in get_candidate_stats: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            "totalInterviews": 0,
            "completedInterviews": 0,
            "scheduledInterviews": 0,
            "averageScore": 0
        }

@router.get("/hr/stats")
def get_hr_stats(
    current_user: User = Depends(get_current_hr_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è HR"""
    
    try:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ HR (–≤—Å–µ –∑–∞—è–≤–∫–∏, –Ω–µ —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã)
        total_candidates = db.query(Resume).join(Vacancy).filter(
            Vacancy.creator_id == current_user.id,
            Resume.user_id.isnot(None)
        ).count()
        
        # –£—Å–ø–µ—à–Ω—ã–µ –Ω–∞–π–º—ã (–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏)
        successful_hires = db.query(Resume).join(Vacancy).filter(
            Vacancy.creator_id == current_user.id,
            Resume.status == ApplicationStatus.ACCEPTED
        ).count()
        
        # –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏ (–Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏)
        pending_applications = db.query(Resume).join(Vacancy).filter(
            Vacancy.creator_id == current_user.id,
            Resume.status == ApplicationStatus.PENDING
        ).count()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        total_interviews = 0
        
        return {
            "totalCandidates": total_candidates,
            "totalInterviews": total_interviews,
            "successfulHires": successful_hires,
            "pending": pending_applications
        }
    except Exception as e:
        print(f"Error in get_hr_stats: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            "totalCandidates": 0,
            "totalInterviews": 0,
            "successfulHires": 0,
            "pending": 0
        }

@router.get("/candidate/recent-interviews")
def get_candidate_recent_interviews(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    
    try:
        interviews = db.query(Interview).join(Resume).join(Vacancy).filter(
            Resume.user_id == current_user.id
        ).order_by(desc(Interview.created_at)).limit(10).all()
        
        result = []
        for interview in interviews:
            result.append({
                "id": interview.id,
                "company": interview.vacancy.title if interview.vacancy else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
                "position": interview.vacancy.title if interview.vacancy else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è",
                "date": interview.scheduled_date.isoformat() if interview.scheduled_date else None,
                "status": interview.status.value,
                "score": interview.pass_percentage,
                "feedback": interview.summary
            })
        
        return result
    except Exception as e:
        return []

@router.get("/hr/recent-interviews")
def get_hr_recent_interviews(
    current_user: User = Depends(get_current_hr_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è HR"""
    
    try:
        interviews = db.query(Interview).join(Vacancy).filter(
            Vacancy.creator_id == current_user.id
        ).order_by(desc(Interview.created_at)).limit(10).all()
        
        result = []
        for interview in interviews:
            candidate_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç"
            if interview.resume and interview.resume.user:
                candidate_name = interview.resume.user.full_name or interview.resume.user.username
            
            result.append({
                "id": interview.id,
                "candidate": candidate_name,
                "position": interview.vacancy.title if interview.vacancy else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è",
                "date": interview.scheduled_date.isoformat() if interview.scheduled_date else None,
                "score": interview.pass_percentage,
                "status": interview.status.value
            })
        
        return result
    except Exception as e:
        return []


@router.get("/hr/interviews")
def get_hr_interviews_endpoint(
    current_user: User = Depends(get_current_hr_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è HR (–¥—É–±–ª–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–æ—É—Ç)"""
    return get_hr_recent_interviews(current_user, db)

@router.get("/candidates")
def get_candidates(
    current_user: User = Depends(get_current_hr_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è HR"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ä–µ–∑—é–º–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ HR (–Ω–µ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º)
        resumes_query = db.query(Resume).join(Vacancy).filter(
            Vacancy.creator_id == current_user.id
        ).order_by(desc(Resume.uploaded_at))
        
        resumes = resumes_query.all()
        
        result = []
        for resume in resumes:
            candidate = resume.user
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–∑ –∑–∞–º–µ—Ç–æ–∫
            ai_recommendation = "–ù–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
            if resume.notes and "ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ò–ò:" in resume.notes:
                ai_part = resume.notes.split("ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ò–ò:")[-1].strip()
                if "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é" in ai_part:
                    ai_recommendation = "–î–∞"
                elif "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è" in ai_part:
                    ai_recommendation = "–ù–µ—Ç"
                else:
                    ai_recommendation = "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
            elif resume.notes and "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø_–°–¢–†–£–ö–¢–£–†–ê:" in resume.notes:
                rec = resume.notes.split("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø_–°–¢–†–£–ö–¢–£–†–ê:")[-1].strip()
                if "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è" in rec:
                    ai_recommendation = "–î–∞"
                elif "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è" in rec:
                    ai_recommendation = "–ù–µ—Ç"
                else:
                    ai_recommendation = "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
            
            download_path = f"/resumes/{resume.id}/download"
            
            result.append({
                "id": resume.id,
                "candidate_name": candidate.full_name or candidate.username,
                "position": resume.vacancy.title if resume.vacancy else "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                "date": resume.uploaded_at.strftime("%d %b %Y"),
                "type": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
                "status": resume.status.value,
                "statusColor": get_status_color_by_resume_status(resume.status),
                "recommended": ai_recommendation,
                "resume_url": download_path,
                "vacancy_description": resume.vacancy.description if resume.vacancy else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                "ai_analysis": resume.notes if resume.notes else "–ê–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω"
            })
        
        return result
    except Exception as e:
        print(f"Error in get_candidates: {e}")
        return []

def get_status_color(status):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    if not status:
        return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
    
    status_colors = {
        InterviewStatus.COMPLETED: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
        InterviewStatus.IN_PROGRESS: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200",
        InterviewStatus.NOT_STARTED: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"
    }
    
    return status_colors.get(status, "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200")

def get_status_color_by_resume_status(status):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∑—é–º–µ"""
    from app.models import ApplicationStatus
    
    status_colors = {
        ApplicationStatus.PENDING: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",
        ApplicationStatus.ACCEPTED: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
        ApplicationStatus.REJECTED: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",
        ApplicationStatus.INTERVIEW_SCHEDULED: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",
        ApplicationStatus.INTERVIEW_COMPLETED: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200"
    }
    
    return status_colors.get(status, "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200")