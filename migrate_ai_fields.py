#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ AI –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É vacancy_applications
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import text
from app.db.session import engine

async def migrate_ai_fields():
    """–î–æ–±–∞–≤–ª—è–µ—Ç AI –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É vacancy_applications"""
    try:
        async with engine.begin() as conn:
            print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –ø–æ–ª–µ–π...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            result = await conn.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'vacancy_applications'
                );
            """))
            
            table_exists = result.scalar()
            if not table_exists:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ vacancy_applications –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º AI –ø–æ–ª—è
            migration_sql = """
            ALTER TABLE vacancy_applications 
            ADD COLUMN IF NOT EXISTS resume_file_path VARCHAR(500),
            ADD COLUMN IF NOT EXISTS resume_file_name VARCHAR(255),
            ADD COLUMN IF NOT EXISTS resume_file_size INTEGER,
            ADD COLUMN IF NOT EXISTS cover_letter TEXT,
            ADD COLUMN IF NOT EXISTS notes TEXT,
            ADD COLUMN IF NOT EXISTS ai_recommendation TEXT,
            ADD COLUMN IF NOT EXISTS ai_match_percentage INTEGER,
            ADD COLUMN IF NOT EXISTS ai_analysis_date TIMESTAMP,
            ADD COLUMN IF NOT EXISTS interview_date TIMESTAMP,
            ADD COLUMN IF NOT EXISTS interview_link VARCHAR(500),
            ADD COLUMN IF NOT EXISTS interview_notes TEXT,
            ADD COLUMN IF NOT EXISTS status_updated_at TIMESTAMP;
            """
            
            await conn.execute(text(migration_sql))
            
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìã –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:")
            print("   üìÑ resume_file_path (VARCHAR(500)) - –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É —Ä–µ–∑—é–º–µ")
            print("   üìÑ resume_file_name (VARCHAR(255)) - –ò–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ")
            print("   üìÑ resume_file_size (INTEGER) - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö")
            print("   üí¨ cover_letter (TEXT) - –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ")
            print("   üìù notes (TEXT) - –ó–∞–º–µ—Ç–∫–∏ HR –∏ AI –∞–Ω–∞–ª–∏–∑")
            print("   ü§ñ ai_recommendation (TEXT) - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –ò–ò")
            print("   üìä ai_match_percentage (INTEGER) - –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (0-100)")
            print("   üïí ai_analysis_date (TIMESTAMP) - –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò")
            print("   üìÖ interview_date (TIMESTAMP) - –î–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é")
            print("   üîó interview_link (VARCHAR(500)) - –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é")
            print("   üìù interview_notes (TEXT) - –ó–∞–º–µ—Ç–∫–∏ –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é")
            print("   üïí status_updated_at (TIMESTAMP) - –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            
            print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—é–º–µ!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise

if __name__ == "__main__":
    print("üîß –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    asyncio.run(migrate_ai_fields())
